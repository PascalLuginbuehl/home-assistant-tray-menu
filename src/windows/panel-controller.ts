import { BrowserWindow, ipcMain } from 'electron';
import { repositionPanel } from './panel-utils';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const TRAY_WINDOW_WEBPACK_ENTRY: string;
declare const TRAY_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

export interface IPanelSize {
  width: number,
  height: number,
  taskbar: ITaskbarPosition | null,
  base: number
  visible: boolean
  bounds: Electron.Rectangle | null
}

export type TaskbarPositionsEnum = 'LEFT' | 'TOP' | 'RIGHT' | 'BOTTOM';
export interface ITaskbarPosition {
  position: TaskbarPositionsEnum,
  gap: number
}

export default class PanelController {
  public panelSize: IPanelSize = {
    width: 356,
    height: 500,
    base: 0,
    visible: false,
    taskbar: null,
    bounds: null,
  };

  public panelWindow: BrowserWindow;

  constructor() {
    this.panelWindow = this.createPanel();
    this.attachResizeEvent();
  }

  attachResizeEvent() {
    ipcMain.on('panel-height', (event, height) => {
      this.panelSize.height = height; // + (settings?.isWin11 ? 24 : 0)
      this.panelSize.width = 356; // + (settings?.isWin11 ? 24 : 0)
      if (this.panelSize.visible) {
        this.showPanel();
      }
    });
  }

  createPanel(): BrowserWindow {
    const panelWindow = new BrowserWindow({
      width: this.panelSize.width,
      height: this.panelSize.height,
      x: 0,
      y: 0,
      minHeight: 0,
      minWidth: 0,

      backgroundColor: '#00000000',
      transparent: true,

      frame: false,
      show: false,
      alwaysOnTop: false,
      skipTaskbar: true,
      resizable: false,
      type: 'toolbar',
      title: 'Home Assistant Menu Flyout',
      maximizable: false,
      minimizable: false,
      webPreferences: {
        preload: TRAY_WINDOW_PRELOAD_WEBPACK_ENTRY,

        // Non default values
        spellcheck: false,
        webgl: false,
        enableWebSQL: false,
      },
    });

    // and load the index.html of the app.
    panelWindow.loadURL(TRAY_WINDOW_WEBPACK_ENTRY);

    panelWindow.on('blur', () => {
      this.hidePanel();
    });

    return panelWindow;
  }

  // Set brightness panel state (visible or not)
  showPanel() {
    this.panelWindow.restore();

    repositionPanel(this.panelWindow, this.panelSize);

    this.panelSize.visible = true;

    // this.panelSize.bounds = screen.dipToScreenRect(this.panelWindow, this.panelWindow.getBounds());
    this.panelSize.bounds = this.panelWindow.getBounds();

    // Bottom, left, right
    this.panelWindow.show();
    this.panelWindow.setBounds(this.panelSize.bounds);

    this.panelWindow.setAlwaysOnTop(true, 'modal-panel');
    this.panelWindow.focus();

    this.panelWindow.setOpacity(1);
    this.panelWindow.show();
  }

  hidePanel() {
    // Hide panel
    this.panelWindow.setAlwaysOnTop(false);
    this.panelSize.visible = false;

    this.panelWindow.minimize();
    this.panelWindow.setOpacity(0);
    // startHidePanel()
  }
}
