import { BrowserWindow, Menu, Tray, screen } from "electron";
import { repositionPanel } from "./panel-utils";
import path from "path"

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const PANEL_WINDOW_WEBPACK_ENTRY: string;
declare const PANEL_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

export const createTray = (): Tray => {
  const tray = new Tray(path.join(__dirname, '../..', '/assets/redIcon@3x.png'));

  const contextMenu = Menu.buildFromTemplate([
    { label: 'Item1', type: 'radio' },
    { label: 'Item2', type: 'radio' },
    { label: 'Item3', type: 'radio', checked: true },
    { label: 'Item4', type: 'radio' }
  ])

  tray.setToolTip('This is my application.')
  tray.setContextMenu(contextMenu)

  return tray
}

export interface IPanelSize {
  width: number,
  height: number,
  taskbar: ITaskbarPosition | null,
  base: number
  visible: boolean
  bounds: Electron.Rectangle | null
}

export type TaskbarPositionsEnum = "LEFT" | "TOP" | "RIGHT" | "BOTTOM"
export interface ITaskbarPosition {
  position: TaskbarPositionsEnum,
  gap: number
}

const panelSize: IPanelSize = {
  width: 356,
  height: 500,
  base: 0,
  visible: false,
  taskbar: null,
  bounds: null
}

export const createPanel = (): BrowserWindow => {
  const panelWindow = new BrowserWindow({
    width: panelSize.width,
    height: panelSize.height,
    x: 0,
    y: 0,
    minHeight: 0,
    minWidth: 0,

    // backgroundColor: "#00000000",
    // transparent: true,

    frame: false,
    show: false,
    alwaysOnTop: false,
    skipTaskbar: true,
    resizable: false,
    type: "toolbar",
    title: "Twinkle Tray Flyout",
    maximizable: false,
    minimizable: false,
    webPreferences: {
      preload: PANEL_WINDOW_PRELOAD_WEBPACK_ENTRY,

      devTools: true,
      // devTools: settings.isDev,

      // Non default values
      spellcheck: false,
      webgl: false,
      enableWebSQL: false,
    }
  });


  // and load the index.html of the app.
  panelWindow.loadURL(PANEL_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  panelWindow.webContents.openDevTools({ mode: 'detach' });

  return panelWindow
};



// Set brightness panel state (visible or not)
export function showPanel(window: BrowserWindow, show = true) {
  if (show) {
    window.restore()

    repositionPanel(window, panelSize)

    panelSize.visible = true

    panelSize.bounds = screen.dipToScreenRect(window, window.getBounds())
    panelSize.bounds = window.getBounds()

    // Bottom, left, right
    window.show()
    window.setBounds(panelSize.bounds)


    window.setAlwaysOnTop(true, 'modal-panel')
    window.focus()

    // Resume mouse events if disabled
    // pauseMouseEvents(false)
    window.setOpacity(1)
    window.show()

  } else {
    // Hide panel
    window.setAlwaysOnTop(false)
    panelSize.visible = false

    // Pause mouse events
    // pauseMouseEvents(true)
    // startHidePanel()
  }
}
