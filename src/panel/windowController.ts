import { BrowserWindow, screen , ipcMain } from "electron";
import { repositionPanel } from "./panel-utils";


// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const PANEL_WINDOW_WEBPACK_ENTRY: string;
declare const PANEL_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

export interface IPanelSize {
  width: number,
  height: number,
  taskbar: ITaskbarPosition | null,
  base: number
  visible: boolean
  bounds: Electron.Rectangle | null
}

export type TaskbarPositionsEnum = "LEFT" | "TOP" | "RIGHT" | "BOTTOM"
export interface ITaskbarPosition {
  position: TaskbarPositionsEnum,
  gap: number
}

const panelSize: IPanelSize = {
  width: 356,
  height: 500,
  base: 0,
  visible: false,
  taskbar: null,
  bounds: null
}

export const createPanel = (): BrowserWindow => {
  const panelWindow = new BrowserWindow({
    width: panelSize.width,
    height: panelSize.height,
    x: 0,
    y: 0,
    minHeight: 0,
    minWidth: 0,

    backgroundColor: "#00000000",
    transparent: true,

    frame: false,
    show: false,
    alwaysOnTop: false,
    skipTaskbar: true,
    resizable: false,
    type: "toolbar",
    title: "Twinkle Tray Flyout",
    maximizable: false,
    minimizable: false,
    webPreferences: {
      preload: PANEL_WINDOW_PRELOAD_WEBPACK_ENTRY,

      devTools: true,
      // devTools: settings.isDev,

      // Non default values
      spellcheck: false,
      webgl: false,
      enableWebSQL: false,

      // FIX: Disables CORS preflight checks
      webSecurity: false,
    }
  });

  ipcMain.on('panel-height', (event, height) => {
    panelSize.height = height //+ (settings?.isWin11 ? 24 : 0)
    panelSize.width = 356 //+ (settings?.isWin11 ? 24 : 0)
    if (panelSize.visible) {
      showPanel(panelWindow, true)
    }
  })


  // and load the index.html of the app.
  panelWindow.loadURL(PANEL_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  panelWindow.webContents.openDevTools({ mode: 'detach' });


  panelWindow.on("blur", () => {
    // if(!panelWindow.webContents.isDevToolsOpened()) {
      showPanel(panelWindow, false)
    // }
  })

  // This rewrites request headers
  panelWindow.webContents.session.webRequest.onBeforeSendHeaders(
    (details, callback) => {
      callback({ requestHeaders: { Origin: '*', ...details.requestHeaders } });
    },
  );

  panelWindow.webContents.session.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        'Access-Control-Allow-Origin': ['*'],
        ...details.responseHeaders,
      },
    });
  });

  return panelWindow
};



// Set brightness panel state (visible or not)
export function showPanel(window: BrowserWindow, show = true) {
  if (show) {
    window.restore()

    repositionPanel(window, panelSize)

    panelSize.visible = true

    panelSize.bounds = screen.dipToScreenRect(window, window.getBounds())
    panelSize.bounds = window.getBounds()

    // Bottom, left, right
    window.show()
    window.setBounds(panelSize.bounds)


    window.setAlwaysOnTop(true, 'modal-panel')
    window.focus()

    // Resume mouse events if disabled
    // pauseMouseEvents(false)
    // controlMouseEvents(false)
    window.setOpacity(1)
    window.show()

  } else {
    // Hide panel
    window.setAlwaysOnTop(false)
    panelSize.visible = false

    // Pause mouse events
    // controlMouseEvents(true)
    // startHidePanel()
  }
}
