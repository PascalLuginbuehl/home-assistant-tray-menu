import { app, BrowserWindow, ipcMain, screen } from 'electron';
import PanelController from './panel/panel-controller';
import { createTray } from './panel/tray-utils';
import store from './store';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const SETTINGS_WINDOW_WEBPACK_ENTRY: string;
declare const SETTINGS_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// IPC listener
ipcMain.on('electron-store-get', async (event, val) => {
  event.returnValue = store.get(val);
});

ipcMain.on('electron-store-set', async (event, key, val) => {
  store.set(key, val);
});


export const openSettings = () => {
  const { width, height } = screen.getPrimaryDisplay().workAreaSize

  // Settings from Twinkle tray
  const settingsWindow = new BrowserWindow({
    width: (width >= 1200 ? 1024 : 600),
    height: (height >= 768 ? 720 : 500),
    minHeight: 450,
    minWidth: 400,
    // show: false,
    maximizable: true,
    resizable: true,
    minimizable: true,
    autoHideMenuBar: true,
    // backgroundColor: "#00000000",
    // frame: false,
    // icon: './src/assets/logo.ico',
    title: "Home Assistant Tray Menu Settings",
    webPreferences: {
      preload: SETTINGS_WINDOW_PRELOAD_WEBPACK_ENTRY,

       // FIX: Disables CORS preflight checks
      webSecurity: false,
    }
  });

  // and load the index.html of the app.
  settingsWindow.loadURL(SETTINGS_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  settingsWindow.webContents.openDevTools({ mode: 'detach' });
}


const initTray = (): void => {
  const panel = PanelController.createInstance()
  // trigger reload to load new API Keys and API Url
  ipcMain.on('electron-store-set', async () => {
    panel.reload()
  });

  const tray = createTray(app, panel)
  // showPanel(panel, true, 100)
};


// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', initTray);


// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.



