import { BrowserWindow, screen , ipcMain } from "electron";
import { repositionPanel } from "./panel-utils";
import { enableMouseEvents, pauseMouseEvents, resumeMouseEvents } from "./mouse-events";


// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const PANEL_WINDOW_WEBPACK_ENTRY: string;
declare const PANEL_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

export interface IPanelSize {
  width: number,
  height: number,
  taskbar: ITaskbarPosition | null,
  base: number
  visible: boolean
  bounds: Electron.Rectangle | null
}

export type TaskbarPositionsEnum = "LEFT" | "TOP" | "RIGHT" | "BOTTOM"
export interface ITaskbarPosition {
  position: TaskbarPositionsEnum,
  gap: number
}


class PanelController {
  public panelSize: IPanelSize = {
    width: 356,
    height: 500,
    base: 0,
    visible: false,
    taskbar: null,
    bounds: null
  }

  public panelWindow: BrowserWindow

  createInstance() {
    this.panelWindow = this.createPanel()
    this.attachResizeEvent()
    enableMouseEvents(this.panelWindow)

    return this.panelWindow
  }

  attachResizeEvent() {
    ipcMain.on('panel-height', (event, height) => {
      this.panelSize.height = height //+ (settings?.isWin11 ? 24 : 0)
      this.panelSize.width = 356 //+ (settings?.isWin11 ? 24 : 0)
      if (this.panelSize.visible) {
        this.showPanel()
      }
    })
  }

  createPanel(): BrowserWindow {
    const panelWindow = new BrowserWindow({
      width: this.panelSize.width,
      height: this.panelSize.height,
      x: 0,
      y: 0,
      minHeight: 0,
      minWidth: 0,

      backgroundColor: "#00000000",
      transparent: true,

      frame: false,
      show: false,
      alwaysOnTop: false,
      skipTaskbar: true,
      resizable: false,
      type: "toolbar",
      title: "Twinkle Tray Flyout",
      maximizable: false,
      minimizable: false,
      webPreferences: {
        preload: PANEL_WINDOW_PRELOAD_WEBPACK_ENTRY,

        devTools: true,
        // devTools: settings.isDev,

        // Non default values
        spellcheck: false,
        webgl: false,
        enableWebSQL: false,

        // FIX: Disables CORS preflight checks
        webSecurity: false,
      }
    });

    // and load the index.html of the app.
    panelWindow.loadURL(PANEL_WINDOW_WEBPACK_ENTRY);

    // Open the DevTools.
    panelWindow.webContents.openDevTools({ mode: 'detach' });


    panelWindow.on("blur", () => {
      // if(!panelWindow.webContents.isDevToolsOpened()) {
        this.hidePanel()
      // }
    })

    // This rewrites request headers
    panelWindow.webContents.session.webRequest.onBeforeSendHeaders(
      (details, callback) => {
        callback({ requestHeaders: { Origin: '*', ...details.requestHeaders } });
      },
    );

    panelWindow.webContents.session.webRequest.onHeadersReceived((details, callback) => {
      callback({
        responseHeaders: {
          'Access-Control-Allow-Origin': ['*'],
          ...details.responseHeaders,
        },
      });
    });

    return panelWindow
  }



  // Set brightness panel state (visible or not)
  showPanel() {
      this.panelWindow.restore()

      repositionPanel(this.panelWindow, this.panelSize)

      this.panelSize.visible = true

      this.panelSize.bounds = screen.dipToScreenRect(this.panelWindow, this.panelWindow.getBounds())
      this.panelSize.bounds = this.panelWindow.getBounds()

      // Bottom, left, right
      this.panelWindow.show()
      this.panelWindow.setBounds(this.panelSize.bounds)


      this.panelWindow.setAlwaysOnTop(true, 'modal-panel')
      this.panelWindow.focus()

      // Resume mouse events if disabled
      resumeMouseEvents()
      this.panelWindow.setOpacity(1)
      this.panelWindow.show()
  }


  hidePanel() {
    console.log("Hide panel")
    // Hide panel
    this.panelWindow.setAlwaysOnTop(false)
    this.panelSize.visible = false

    // Pause mouse events
    pauseMouseEvents()
    this.panelWindow.minimize();
    this.panelWindow.setOpacity(0)
    // startHidePanel()
  }
}


export default new PanelController()
